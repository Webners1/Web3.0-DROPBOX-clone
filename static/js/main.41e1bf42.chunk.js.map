{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","useState","loading","setLoading","fileTYPE","setFileType","buffer","setBuffer","fileName","setfileName","files","setFile","fileCount","setFileCount","dstorage","setDstorage","account","setAccount","loadWeb3","a","ethereum","web3","Web3","enable","currentProvider","alert","loadBlockchainData","eth","getAccounts","net","getId","networkId","netId","Dstorage","networks","abi","Contract","address","methods","fileId","call","console","log","i","file","init","useEffect","id","className","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onload","Buffer","result","type","name","uploadFile","description","add","err","UploadFile","hash","size","send","from","on","reload","e","Navbar","props","href","rel","src","box","width","height","alt","module","exports","Main","fileDescription","setFileDescription","role","style","maxWidth","onSubmit","value","ref","placeholder","required","onChange","background","maxHeight","scope","map","key","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","substring","fileHash"],"mappings":"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","file":"static/js/main.41e1bf42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","//import DStorage from '../abis/DStorage.json'\r\nimport React, { Component,useState,useEffect } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport Dstorage from '../abis/DStorage.json'\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\r\nfunction App() {\r\n  let [loading, setLoading] = useState(false)\r\n  let [fileTYPE, setFileType] = useState()\r\n  let [buffer, setBuffer] = useState()\r\n  let [fileName, setfileName] = useState()\r\n  let [files, setFile] = useState([])\r\n  let [description, setDescription] = useState()\r\n  let [fileCount, setFileCount] = useState(0)\r\n  let [dstorage, setDstorage] = useState()\r\nlet[account,setAccount] = useState()\r\n\r\n  const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    }\r\n    // Legacy dapp browsers...\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    }\r\n    // Non-dapp browsers...\r\n    else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  };\r\n  const loadBlockchainData=async()=>{\r\n    const web3 = window.web3\r\n    //Declare Web3\r\nsetAccount(account = (await web3.eth.getAccounts())[0])\r\n    //Load account\r\nconst networkId = await web3.eth.net.getId()\r\n    let netId = Dstorage.networks[networkId]\r\n    if(netId){\r\n      const abi = Dstorage.abi\r\n      setDstorage(dstorage = new web3.eth.Contract(abi, netId.address))\r\n      setFileCount(fileCount = await dstorage.methods.fileId().call());\r\n      console.log(fileCount)\r\n      for (var i = fileCount;i>=1;i--){\r\n      const file = await dstorage.methods.files(i).call()\r\n      console.log(file)\r\n      setFile(files = [...files,file])\r\n    }\r\n    \r\n    }\r\n    //Network ID\r\n\r\n    //IF got connection, get data from contracts\r\n      //Assign contract\r\n\r\n      //Get files amount\r\n\r\n      //Load files&sort by the newest\r\n\r\n    //Else\r\n      //alert Error\r\n\r\n  }\r\nconst init=async()=>{\r\n  await loadWeb3()\r\n  await loadBlockchainData()\r\n}\r\n  // Get file from user\r\n  const captureFile = event => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onload=()=>{\r\n      setBuffer(buffer = Buffer(reader.result))\r\nsetFileType(fileTYPE=file.type)\r\nsetfileName(fileName = file.name)\r\n    }\r\n  }\r\n\r\n\r\n  //Upload File\r\n  const uploadFile = description => {\r\n    //Add file to the IPFS\r\n    ipfs.add(buffer,(err,result)=>{\r\n      console.log(result)\r\nif(err){\r\n  window.alert(err)\r\n\r\n}\r\n      setLoading(true)\r\n      if(fileTYPE===''){\r\n        setFileType('none')\r\n      }\r\n      console.log(dstorage)\r\n      dstorage.methods.UploadFile(result[0].hash, result[0].size, fileTYPE, fileName, description).send({from:account}).on('transactionHash',(hash)=>{\r\n        setLoading(false)\r\n        setFileType(null)\r\n        setfileName(null)\r\n        window.location.reload()  \r\n      }).on('error',(e)=>{\r\n        window.alert(e)\r\n        setLoading(false)\r\n      })\r\n})\r\n      //Check If error\r\n        //Return error\r\n\r\n      //Set state to loading\r\n\r\n      //Assign value for the file without extension\r\n\r\n      //Call smart contract uploadFile function \r\n\r\n  }\r\n\r\nuseEffect(()=>{\r\ninit()\r\n}, [buffer])\r\n  //Set states\r\n \r\n\r\n    return (\r\n      <div>\r\n        <Navbar account={account} />\r\n        {loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              files={files}\r\n              captureFile={captureFile}\r\n              uploadFile={uploadFile}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport box from '../box.png'\r\n\r\nfunction Navbar(props) {\r\n\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          D$t0r@g3\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <b className='text-white'>{props.account}</b>\r\n        </ul>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component,useState } from 'react';\r\nimport { convertBytes } from './helpers';\r\nimport moment from 'moment'\r\nimport { InputGroup } from 'react-bootstrap';\r\n\r\nfunction Main(props) {\r\nlet[fileDescription,setFileDescription] = useState('')\r\n \r\n    return (\r\n      <div className=\"container-fluid mt-5 text-center\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\r\n            <div className=\"content\">\r\n              <p>&nbsp;</p>\r\n              <h1>DStorage starter_code</h1>\r\n             <form onSubmit={(e)=>{\r\n              e.preventDefault();\r\n                const description = fileDescription.value\r\n              props.uploadFile(description)\r\n             }}>\r\n               <div className='form-group'>\r\n<br></br>\r\n             <input\r\n                    id='fileDescription'\r\n               type='text'\r\n               ref={(ref)=>{\r\n                 setFileDescription(fileDescription = ref)\r\n               }}\r\n             className='form-control text-monospace'\r\n             placeholder='description...'\r\n             required\r\n             />\r\n               </div>\r\n                <input type='file' onChange={(e) => props.captureFile(e)} style={{background:'black'}}className='text-white text-monospace'/>\r\n               <button type='submit' className='btn-primary btn-block'>Upload!</button>\r\n             </form>\r\n            \r\n              {/* Create Table*/}\r\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px' }}>\r\n                <thead style={{ 'fontSize': '15px' }}>\r\n                  <tr className=\"bg-dark text-white\">\r\n                    <th scope=\"col\" style={{ width: '10px' }}>id</th>\r\n                    <th scope=\"col\" style={{ width: '200px' }}>name</th>\r\n                    <th scope=\"col\" style={{ width: '230px' }}>description</th>\r\n                    <th scope=\"col\" style={{ width: '120px' }}>type</th>\r\n                    <th scope=\"col\" style={{ width: '90px' }}>size</th>\r\n                    <th scope=\"col\" style={{ width: '90px' }}>date</th>\r\n                    <th scope=\"col\" style={{ width: '120px' }}>uploader/view</th>\r\n                    <th scope=\"col\" style={{ width: '120px' }}>hash/view/get</th>\r\n                  </tr>\r\n                </thead>\r\n                {props.files.map((file, key) => {\r\n                  return (\r\n                    <thead style={{ 'fontSize': '12px' }} key={key}>\r\n                      <tr>\r\n                        <td>{file.fileId}</td>\r\n                        <td>{file.fileName}</td>\r\n                        <td>{file.fileDescription}</td>\r\n                        <td>{file.fileType}</td>\r\n                        <td>{convertBytes(file.fileSize)}</td>\r\n                        <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\r\n                        <td>\r\n                          <a\r\n                            href={\"https://etherscan.io/address/\" + file.uploader}\r\n                            rel=\"noopener noreferrer\"\r\n                            target=\"_blank\">\r\n                            {file.uploader.substring(0, 10)}...\r\n                          </a>\r\n                        </td>\r\n                        <td>\r\n                          <a\r\n                            href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                            rel=\"noopener noreferrer\"\r\n                            target=\"_blank\">\r\n                            {file.fileHash.substring(0, 10)}...\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                    </thead>\r\n                  )\r\n                })}\r\n              </table>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Main;","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}